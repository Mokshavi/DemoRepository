<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>itemis: Xtext editors for binary files</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/xtext-editors-for-binary-files</guid>
	<link>https://blogs.itemis.com/en/xtext-editors-for-binary-files</link>
	<description>&lt;p&gt; What does &quot;4 + 1&quot; mean? Well, for example itemis employees have been developing a Java bytecode editor with Xtext. This editor allows the contents of &lt;code&gt;.class&lt;/code&gt; files to be made visible and editable.&lt;br /&gt;In the first part of this article I explained how the JBC editor is used. In this second part I want to discuss the technical problems that arise when you want to make a binary file editable with an Xtext-based editor. &lt;/p&gt; 
&lt;p&gt;The first issue to solve for a text editor for binary files is to convert the binary data into a textual format without the text editor being involved. This is done by replacing the editor with an &lt;code&gt;IDocumentProvider&lt;/code&gt;, which then performs appropriate transformations when loading and saving. As usual in Xtext this is done by dependency injection and registration within the UI module:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package com.itemis.jbc.ui&lt;br /&gt;&lt;br /&gt;import com.itemis.jbc.ui.custom.JBCDocumentProvider&lt;br /&gt;import org.eclipse.xtext.ui.editor.model.XtextDocumentProvider&lt;br /&gt;&lt;br /&gt;@FinalFieldsConstructor&lt;br /&gt;class JBCUiModule extends AbstractJBCUiModule {&lt;br /&gt;    def Class&amp;lt;? extends XtextDocumentProvider&amp;gt; bindXtextDocumentProvider() {&lt;br /&gt;        JBCDocumentProvider&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt; 
&lt;p&gt; &lt;br /&gt;The &lt;code&gt;JBCDocumentProvider&lt;/code&gt; now overrides the two methods &lt;code&gt;setDocumentContent&lt;/code&gt; and &lt;code&gt;doSaveDocument&lt;/code&gt;. The first method converts the binary stream into text, while the second returns binary content from the model the editor obtained from the &lt;code&gt;XTextDocument&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package com.itemis.jbc.ui.custom&lt;br /&gt;&lt;br /&gt;import com.itemis.jbc.binary.ByteCodeWriter&lt;br /&gt;import com.itemis.jbc.jbc.ClassFile&lt;br /&gt;import java.io.ByteArrayInputStream&lt;br /&gt;import java.io.InputStream&lt;br /&gt;import org.eclipse.core.runtime.CoreException&lt;br /&gt;import org.eclipse.core.runtime.IProgressMonitor&lt;br /&gt;import org.eclipse.jface.text.IDocument&lt;br /&gt;import org.eclipse.ui.IFileEditorInput&lt;br /&gt;import org.eclipse.xtext.resource.XtextResource&lt;br /&gt;import org.eclipse.xtext.ui.editor.model.XtextDocument&lt;br /&gt;import org.eclipse.xtext.ui.editor.model.XtextDocumentProvider&lt;br /&gt;import org.eclipse.xtext.util.concurrent.IUnitOfWork&lt;br /&gt;&lt;br /&gt;class JBCDocumentProvider extends XtextDocumentProvider {&lt;br /&gt;    override protected setDocumentContent(IDocument document, InputStream contentStream,&lt;br /&gt;            String encoding) throws CoreException {
&lt;span style=&quot;font-weight: 400;&quot;&gt;        document.set(new JBCInputStreamContentReader().readContent(contentStream, encoding))&lt;br /&gt;    }&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;override protected doSaveDocument(IProgressMonitor monitor, Object element,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IDocument document, boolean overwrite) throws CoreException {&lt;br /&gt;        if (element instanceof IFileEditorInput) {&lt;br /&gt;            if (document instanceof XtextDocument) {&lt;br /&gt;                if (element.file.exists &amp;amp;&amp;amp; element.file.name.endsWith(&quot;.class&quot;)) {&lt;br /&gt;                    document.readOnly(new IUnitOfWork.Void&amp;lt;XtextResource&amp;gt;() {&lt;br /&gt;                        override process(XtextResource resource) throws Exception {&lt;br /&gt;                            val ast = resource.parseResult.rootASTElement&lt;br /&gt;                            element.file.setContents(new ByteArrayInputStream(&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;ByteCodeWriter.writeClassFile(ast as ClassFile)),&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                                    true, true, monitor))});&lt;br /&gt;                    return;&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;        super.doSaveDocument(monitor, element, document, overwrite)&lt;br /&gt;    }&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt; &lt;br /&gt;This is enough to fool the Xtext-based editor, as it provides it with a plain text file, but the result is not quite satisfactory. This is because the editor compares the textual content with the binary data obtained from the &lt;code&gt;.class&lt;/code&gt; file to highlight changed regions. This happens because the comparison algorithm does not get the file content directly from the editor, but instead requests &lt;code&gt;IFileEditorInput&lt;/code&gt; from the file content and &lt;code&gt;getStorage&lt;/code&gt; via the method to get the &lt;code&gt;InputStream&lt;/code&gt;.&lt;br /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;NoProxyForIFileInput&quot; height=&quot;527&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/NoProxyForIFileInput.png?t=1531400974302&amp;amp;width=660&amp;amp;height=527&amp;amp;name=NoProxyForIFileInput.png&quot; style=&quot;width: 660px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;660&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;To make the comparison meaningful, this stream also has to be transformed in the same way as was done when creating the &lt;code&gt;IDocument&lt;/code&gt;. To do this, the &lt;code&gt;doSetInput&lt;/code&gt; (&lt;code&gt;IEditorInput input&lt;/code&gt;) method is overridden by the &lt;code&gt;JBCEditor&lt;/code&gt;, so that the set input is packaged in a dynamic proxy.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package com.itemis.jbc.ui.custom&lt;br /&gt;&lt;br /&gt;import java.io.InputStreamReader&lt;br /&gt;import java.lang.reflect.InvocationHandler&lt;br /&gt;import java.lang.reflect.Method&lt;br /&gt;import java.lang.reflect.Proxy&lt;br /&gt;import org.eclipse.core.resources.IEncodedStorage&lt;br /&gt;import org.eclipse.core.resources.IStorage&lt;br /&gt;import org.eclipse.core.runtime.CoreException&lt;br /&gt;import org.eclipse.ui.IEditorInput&lt;br /&gt;import org.eclipse.ui.IFileEditorInput&lt;br /&gt;import org.eclipse.xtext.ui.editor.XtextEditor&lt;br /&gt;import org.eclipse.xtext.util.StringInputStream&lt;br /&gt;&lt;br /&gt;class JBCEditor extends XtextEditor {&lt;br /&gt;    override protected doSetInput(IEditorInput input) throws CoreException {&lt;br /&gt;        if (input instanceof IFileEditorInput) {&lt;br /&gt;            if (input.file.name.endsWith(&quot;.class&quot;)) {&lt;br /&gt;                super.doSetInput(input.proxy)&lt;br /&gt;                return&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;        super.doSetInput(input)&lt;br /&gt;    }&lt;br /&gt;    def private IFileEditorInput proxy(IFileEditorInput editorInput) {&lt;br /&gt;        Proxy.newProxyInstance(this.class.classLoader, #[IFileEditorInput],&lt;br /&gt;                new IFileEditorInputHandler(editorInput)) as IFileEditorInput&lt;br /&gt;    }&lt;br /&gt;} &lt;/pre&gt; 
&lt;p&gt;&lt;br /&gt;The latter returns another dynamic proxy for the &lt;code&gt;getStorage&lt;/code&gt; query, which converts the file content supplied by &lt;code&gt;getContents&lt;/code&gt; into textual format.&lt;br /&gt; &lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package class IFileEditorInputHandler implements InvocationHandler {&lt;br /&gt;    private final IFileEditorInput original&lt;br /&gt;&lt;br /&gt;    new(IFileEditorInput original) {&lt;br /&gt;        this.original = original&lt;br /&gt;    }&lt;br /&gt;    override invoke(Object proxy, Method method, Object[] args) throws Throwable {&lt;br /&gt;        if (method.name.equals(&quot;getStorage&quot;)) {&lt;br /&gt;            return (method.invoke(original, args) as IStorage).proxy&lt;br /&gt;        } else {&lt;br /&gt;            return method.invoke(original, args)&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    def private IStorage proxy(IStorage storage) {&lt;br /&gt;        Proxy.newProxyInstance(this.class.classLoader, #[IStorage],&lt;br /&gt;                new IStorageHandler(storage)) as IStorage&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package class IStorageHandler implements InvocationHandler {&lt;br /&gt;    private final IStorage original&lt;br /&gt;&lt;br /&gt;    new(IStorage original) {&lt;br /&gt;        this.original = original&lt;br /&gt;    }&lt;br /&gt;    override invoke(Object proxy, Method method, Object[] args) throws Throwable {&lt;br /&gt;        if (method.name.equals(&quot;getContents&quot;) &amp;amp;&amp;amp; method.parameterCount === 0) {&lt;br /&gt;            val reader = new InputStreamReader(original.contents)&lt;br /&gt;            try {&lt;br /&gt;                val content = new JBCInputStreamContentReader().readContent(original.contents&lt;br /&gt;                        (original as IEncodedStorage).charset)&lt;br /&gt;                return new StringInputStream(content)&lt;br /&gt;            } finally {&lt;br /&gt;                reader.close()&lt;br /&gt;            }&lt;br /&gt;        } else {&lt;br /&gt;            return method.invoke(original, args)&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt; 
&lt;p&gt; &lt;br /&gt;As a result the &lt;code&gt;editor.getStorage().GetContents()&lt;/code&gt; call returns the same content as was supplied by the &lt;code&gt;document.get()&lt;/code&gt;, and the comparison of the document content with that from the file now yields the expected results.&lt;br /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;WithProxyForIFileInput&quot; height=&quot;377&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/WithProxyForIFileInput.png?t=1531400974302&amp;amp;width=660&amp;amp;height=377&amp;amp;name=WithProxyForIFileInput.png&quot; style=&quot;width: 660px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;660&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;The editor implemented here is quite simple, in that each &lt;code&gt;.class&lt;/code&gt; file is considered individually: there is no global scope to allow references between multiple files to be resolved and validated. This means that it isn’t easy to develop an entire project directly in class-file-format.&lt;/p&gt; 
&lt;p&gt;However, this is not a fundamental problem, merely a design decision. The editor is explicitly intended for editing individual &lt;code&gt;.class&lt;/code&gt; files. There is nothing wrong, however, with the idea of extending the techniques to other binaries in order to create useful editors for them without an explicit intermediate textual format. These could be stored in files, and these files be linked by references within a global scope.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fxtext-editors-for-binary-files&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 13 Jul 2018 12:10:00 +0000</pubDate>
	<author>adeutsch@itemis.de (Arne Deutsch)</author>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.5.3</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-5-3</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-3-5-3</link>
	<description>&lt;article&gt;&lt;p&gt;We have just released Vert.x 3.5.3, a bug fix release of Vert.x 3.5.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.5.2, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;Vert.x 3.5.3 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.3-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.3-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.2%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.2/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Call for submissions for EclipseCon Europe 2018</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/ebujap_ybxA/europe2018</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/ebujap_ybxA/europe2018</link>
	<description>Be part of the EclipseCon Europe program. Submit your talks by July 16th.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/ebujap_ybxA&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 06 Jul 2018 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Niko Stotz: First Eclipse DemoCamp in Eindhoven: A Great Start and Even Greater Community</title>
	<guid isPermaLink="false">https://www.nikostotz.de/blog/?p=383</guid>
	<link>https://www.nikostotz.de/blog/first-eclipse-democamp-in-eindhoven-a-great-start-and-even-greater-community/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-387&quot; height=&quot;360&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/audience-1024x576.jpg&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Yesterday, we held the first Eclipse DemoCamp ever in Eindhoven, at the Altran office. About 40 people from a dozen different companies joined in and enjoyed the nice dinner buffet.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignright size-medium wp-image-392&quot; height=&quot;300&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/marcV-200x300.jpg&quot; width=&quot;200&quot; /&gt;Marc Vloemans of Eclipse Foundation kicked off the DemoCamp with a short introduction: DemoCamps are about showing the great work members of the Eclipse community contribute – committers and users alike. Marc emphasized the possibilities of sharing the work between different groups and projects, vastly simplified by the Open Source concept.&lt;/p&gt;
&lt;p&gt;Next up was Karsten Thoms of itemis. He swept the audience with an awesome intro – go see it if you have the chance, for example at the &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Bonn&quot;&gt;DemoCamp Bonn&lt;/a&gt; next week or (most probably) &lt;a href=&quot;https://www.eclipsecon.org/europe2018&quot;&gt;EclipseCon Europe&lt;/a&gt; in October! Without spoiling the fun, let’s say it gave A New Hope …&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignleft size-medium wp-image-390&quot; height=&quot;200&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/karsten-300x200.jpg&quot; width=&quot;300&quot; /&gt;Karsten reported on the many changes he and more than 100 other community members contributed to the Eclipse Platform for the Photon Release Train. He showed lots of examples of the general speed improvements of Eclipse Photon. Also, the Run Configuration’s “Add all required Plug-ins” button finally fulfills its promise!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignleft size-medium wp-image-391&quot; height=&quot;169&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/MarcH-300x169.jpg&quot; style=&quot;clear: left;&quot; width=&quot;300&quot; /&gt;Marc Hamilton explained Altran’s approach for real-world complex modeling environments based on half a dozen Eclipse technologies. At the end, there is always some software produced. Using a modeling approach, most of the actual software production is pushed to generators, while the engineers focus on describing the issue at hand in domain-specific languages.&lt;/p&gt;
&lt;p&gt;Marc showed how EMF, OCL, QVTo, Acceleo, EGF, Xtext, and Sirius are used, and listed the advantages, drawbacks and a wishlist for each technology.&lt;/p&gt;
&lt;p style=&quot;clear: both;&quot;&gt;During the break, we had the opportunity to pick up stickers provided by Karsten and discuss with other members of the community.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;size-medium wp-image-394&quot; height=&quot;200&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/stickers-300x200.jpg&quot; width=&quot;300&quot; /&gt; &lt;img alt=&quot;&quot; class=&quot;size-medium wp-image-388&quot; height=&quot;200&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/break-300x200.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear: both;&quot;&gt;After the break, we enjoyed the talk of Mélanie Bats, arriving directly from Obeo in Toulouse. She showed new features of Sirius 6, most prominently the ELK layout integration and the magic connector tool to auto-select applicable connections.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignright size-medium wp-image-393&quot; height=&quot;200&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/melanie-300x200.jpg&quot; width=&quot;300&quot; /&gt;Furthermore, she gave an outlook on the future of Sirius both within Eclipse and in the Web. She envisioned a Graphical Server Protocol akin to the Language Server Protocol to federate diagramming providers from the clients.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignright size-medium wp-image-389&quot; height=&quot;200&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/holger-300x200.jpg&quot; style=&quot;clear: right;&quot; width=&quot;300&quot; /&gt;Last but not least, Holger Schill of itemis presented the new features of Xtext 2.14. He reported on the huge effort required to get Xtext fully compatible with Java 9, 10, and Junit 5 in all supported environments – and there are plenty! Other notable enhancements include code mining support (showing additional information within the editor without changing the file) and support for new Project / File wizards. The latter ones do not only create plain wizards, but provide a rich API to create customized wizards without the usual hassle of creating SWT dialogs.&lt;/p&gt;
&lt;p&gt;We presented a small gift to all the speakers, who spread the word in the community on their own expenses — Huge thanks to Marc, Karsten, Marc, Mélanie, and Holger!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-386&quot; height=&quot;360&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/allSpeakers-1024x576.jpg&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Lots of community members stayed to discuss the presentations and talk to the creators of the technology we use every day.&lt;/p&gt;
&lt;p&gt;We enjoyed the DemoCamp a lot. We’re looking forward to have even more talks, topics, and attendees next time!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-384&quot; height=&quot;360&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/after1-1024x576.jpg&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-385&quot; height=&quot;360&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/after2-1024x576.jpg&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 05 Jul 2018 15:25:18 +0000</pubDate>
        <enclosure url="https://www.nikostotz.de/blog/wp-content/uploads/2018/07/audience-1024x576.jpg" length="2854" type="image/jpeg"/>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Annual Community Report</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/UD8cG7DXw24/2018_annual_report.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/UD8cG7DXw24/2018_annual_report.php</link>
	<description>The Eclipse Foundation's 2018 Annual Community Report has been published, and is now available.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/UD8cG7DXw24&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 03 Jul 2018 20:00:00 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: Rest Remote Services with Karaf and CXF/Jersey</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-8613088716780413920</guid>
	<link>http://eclipseecf.blogspot.com/2018/07/rest-remote-services-with-karaf-and.html</link>
	<description>ECF's &lt;a href=&quot;https://www.eclipse.org/ecf/NewAndNoteworthy.html&quot;&gt;Photon Release&lt;/a&gt; now includes an example of using &lt;a href=&quot;https://wiki.eclipse.org/Tutorial:_JaxRS_Remote_Services_on_Karaf&quot;&gt;Karaf with the JaxRS distribution provider&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This distribution provider now fully supports OSGi R7 remote services, including &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/06/ecf-photon-supports-osgi-r7-async.html&quot;&gt;async remote services&lt;/a&gt;, using either the &lt;a href=&quot;https://wiki.eclipse.org/Tutorial:_JaxRS_Remote_Services_on_Karaf#Using_Jersey_JaxRS_Rather_than_CXF&quot;&gt;Jersey&lt;/a&gt; or &lt;a href=&quot;https://wiki.eclipse.org/Tutorial:_JaxRS_Remote_Services_on_Karaf#Install_CXF_Distribution_Provider_Karaf_Console&quot;&gt;CXF&lt;/a&gt; JaxRS implementations.&lt;br /&gt;&lt;br /&gt;This allows service developers to easily use only &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services&quot;&gt;JAX-RS&lt;/a&gt; annotations to define and implement OSGi R7 remote services.</description>
	<pubDate>Tue, 03 Jul 2018 18:55:35 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter | Eclipse Photon</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/3lCG_6IKNPE/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/3lCG_6IKNPE/</link>
	<description>Naturally, this issue of the newsletter features some of the things that are new in Eclipse Photon!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/3lCG_6IKNPE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 03 Jul 2018 17:00:00 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: Using CMake for the ESP32 with the Eclipse C/C++ IDE</title>
	<guid isPermaLink="false">https://cdtdoug.ca/2018/07/02/cdt-for-esp32</guid>
	<link>https://cdtdoug.ca/2018/07/02/cdt-for-esp32.html</link>
	<description>&lt;p&gt;The Photon release of the Eclipse C/C++ IDE now includes support for a number of different build systems. CMake is one of the most popular build systems with open source projects so it was an obvious candidate. The Eclipse CDT project has been working on CMake support for a few years and now it’s ready for wider adoption.&lt;/p&gt;

&lt;p&gt;One of the open source projects using CMake is the Espressif IoT Development Framework, ESP-IDF, an SDK for their inexpensive and highly featured system on a chip, the ESP32. It is widely popular with hobbyists with boards available from a number of vendors. Though CMake support is currently in a feature branch, it is expected their CMake build files will make it to the master branch in the upcoming months.&lt;/p&gt;

&lt;p&gt;This environment is a great example of how the new features in the Eclipse C/C++ IDE automate much of the build and launch process to speed up development on microcontroller projects. We will walk though each of the steps to build an application and get it running on a board and will highlight the new features in Eclipse Photon as we go.&lt;/p&gt;

&lt;h2 id=&quot;environment&quot;&gt;Environment&lt;/h2&gt;

&lt;p&gt;Espressif provides &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/feature-cmake/get-started/index.html&quot;&gt;thorough documentation on how to set up your development environment&lt;/a&gt;. Here’s a quick highlights of what I did for mine. I’m using Windows 10 with CMake, Ninja, and Python 2.7 provided by &lt;a href=&quot;https://scoop.sh/&quot;&gt;scoop&lt;/a&gt;. No MSYS or Cygwin. I use busybox for my shell but Eclipse doesn’t need it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Follow the &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/feature-cmake/get-started/windows-setup-scratch.html&quot;&gt;Setup Windows Toolchain from Scratch&lt;/a&gt; instructions to get the xtensa toolchain and mconf Kconfig utility. Add them to your PATH environment variable.&lt;/li&gt;
  &lt;li&gt;Checkout the features/cmake branch of the ESP-IDF. Make sure you do a recursive checkout to pick up it’s numerous git submodules. Set the IDF_PATH environment variable to the root location of the repo.&lt;/li&gt;
  &lt;li&gt;Install the pyserial Python library for esptool.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we’re ready to fire up Eclipse.&lt;/p&gt;

&lt;h2 id=&quot;cmake-project&quot;&gt;CMake Project&lt;/h2&gt;

&lt;p&gt;In the New C/C++ Project wizard select “Empty or Existing CMake Project” from the list of templates and create a new project. This will create the project but without a CMakeLists.txt or any source files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/NewCMakeProject.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-toolchain&quot;&gt;The Toolchain&lt;/h2&gt;

&lt;p&gt;We now need to tell CDT which toolchain to use when building the project. This will pass the required arguments to CMake when generating the Ninja files.&lt;/p&gt;

&lt;p&gt;In the Preferences, select C/C++ and then CMake to see the list of toolchain files CDT will use with CMake. Click Add. Each CMake toolchain file is associated with a toolchain. Since we have the xtensa toolchain in our PATH, CDT will auto discover it and it will appear in the dropdown. Also enter the location of the esp-idf toolchain file which is in the esp-idf repo under tools/cmake/toolchain-esp32.cmake.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/CMakeToolchain.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-launch-target&quot;&gt;The Launch Target&lt;/h2&gt;

&lt;p&gt;Next we need to tell CDT to use the toolchain for our project. This is accomplished through the Launch Bar, the new widget set you see on the far left of the toolbar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/LaunchBar.png&quot; style=&quot;height: 100px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the third dropdown and select New Launch Target. We need to tell CDT about the target where we’d like to launch our application. We’ll be using the flash loader so select Serial Flash Target. Enter a name for the target, “esp32” as the operating system, “xtensa” as the CPU architecture, and select the serial port your ESP32 device is connected to on your machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/SerialTarget.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The OS and architecture need to match the settings for the toolchain. You can see those settings in the Preferences by selecting C/C++ and Core Build Toolchains. For GCC toolchains, CDT autodetects those settings by asking GCC for it’s target triple.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/Toolchains.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;build&quot;&gt;Build&lt;/h2&gt;

&lt;p&gt;For this first project, we’ll use the Hello World example from the ESP-IDF. It is found in the examples/get-started/hello_world. Copy the contents of this directory into your project. Since we’re using CMake you can delete the Makefile and the main/component.mk files to prove you’re using CMake.&lt;/p&gt;

&lt;p&gt;Notice that the Launch Bar shows Run Hello World on ESP32. When you click the Build button, it will run a build of that project for the ESP32 Launch Target in Run mode, the only one available for the ESP32 for now, and will make sure the right toolchain and CMake toolchain file are used in the build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/Build.png&quot; style=&quot;height: 200px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;terminal&quot;&gt;Terminal&lt;/h2&gt;

&lt;p&gt;To see what our program does, we need to see the output from the serial port. I have an Adafruit Huzzah32 which uses USB to both power the board while in development and to talk over the serial port. We’ll use the Eclipse Terminal to connect to that serial port. Click the Terminal toolbar button and select Serial Terminal as the terminal type and complete the rest of the settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/Terminal.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;launch&quot;&gt;Launch&lt;/h2&gt;

&lt;p&gt;To get the app running on the board, we need to download it over the USB serial port and burn it into the flash memory on the device. The ESP-IDF has a tool for that called esptool. The IDF also has a nice wrapper script that manages flashing as well as a number of other handy operations.&lt;/p&gt;

&lt;p&gt;To hook it up, we need to set up the launch configuration. This is where the Launch Bar shines. Click on the gear next to your project in the middle selector. It will open a launch configuration edit dialog. Since our target type is Serial Launch Target, it has a simple launch that executes an external tool. We’ll set it up to run python with the idf.py script and set the build directory and serial port and ask it to flash.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/LaunchConfig.png&quot; style=&quot;height: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you had a program running on your chip you’ll notice in the Terminal that it stopped printing there. The CDT has noticed that your launch target and the terminal are using the same serial port and pauses the terminal while the python script runs. This is especially important on Windows since only one program may control the serial port at a time. Once it starts up again, you see the output of your program. This makes it very easy to iterate changes.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Eclipse Photon release of the C/C++ IDE is the culmination of a number of years of work on the Launch Bar and CDT’s new Core Build system that gives us CMake and makes it easy to integrate other build and launch tools. Bringing these tools together and having them work together to accellerate development is what Integrated Development Environments are all about.&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 18:00:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EclipseSource Oomph Profile – updated to Photon</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39731</guid>
	<link>https://eclipsesource.com/blogs/2018/07/02/eclipsesource-oomph-profile-updated-to-photon/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Last week, Eclipse Photon has been released, a new version of the Eclipse IDE and platform. It contains many useful improvements, so it is worth to update.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One of many noteworthy extensions is the new support for code mining. In case you wonder what that is (you do not even find a definition on wikipedia), let us quickly introduce this new feature. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The general idea is to add additional information to a source code editor, which is not code or a comment. That means, this information is not stored in the underlying file, but it augments the text editor during runtime. In fact, you cannot only add information, but also actions, essentially buttons, that can trigger context related behavior.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Let us look at an example: In the following screenshot, you see a test case, which is augmented via code mining. For every test, it shows the state of the last test run, as well as two “buttons” (run and debug) to trigger another execution of the test. The same is available for the test class (e.g. “run all”). The screenshot also shows another example for code mining. The parameter passed into the Junit method fail() is augmented by the type and the name, as defined in the signature of fail().&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EclipseSource Oomph Profile - updated to Photon&quot; class=&quot;alignnone wp-image-39732 size-full&quot; height=&quot;322&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/07/image1.png&quot; width=&quot;395&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please note, that Eclipse itself does not provide any use cases of code mining, but it provides the ability to plugin code mining applications. The examples shown above are from the JDT Code Mining plugin, which &lt;/span&gt;&lt;a href=&quot;https://github.com/angelozerr/jdt-codemining&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;can be found on Github&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. It allows to turn specific code mining applications on or off, depending on how useful you consider them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Code Mining is a very interesting new feature an we look forward to new ideas and use cases that developers might add. Given the well-proven extension mechanism of Eclipse, it is relatively low effort to implement custom code mining extensions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Further general improvements of the Eclipse Photon release are summarized in the following video, Java and Maven improvements in a separate video below.  Both are provided by Holger Voormann, whom we want to thank you for this great work!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As always, in case you use our EclipseSource Oomph profile (see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2015/08/17/introducing-the-eclipsesource-oomph-profile/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details), you should get a notification and Oomph will apply the update automatically. If you do not get the notification, just navigate to the menu entry “Help” =&amp;gt; “Perform Set-Up Task”. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This will automatically update all plugins to Photon, but keep all existing settings untouched.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Have fun with Eclipse Photon!&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 14:45:03 +0000</pubDate>
</item>
<item>
	<title>Karsten Thoms: Touring the Eclipse Photon DemoCamps – Next stop: Eindhoven, NL, July 4th!</title>
	<guid isPermaLink="false">http://kthoms.wordpress.com/?p=1015</guid>
	<link>https://kthoms.wordpress.com/2018/07/02/touring-the-eclipse-photon-democamps-next-stop-eindhoven-nl-july-4th/</link>
	<description>&lt;p&gt;Eclipse DemoCamps are a wonderful format to learn the hottest new stuff from all the bandwidth of Eclipse projects: Core IDE, IoT, Smart Home, Modeling, JakartaEE, MicroProfile, Tools and so on. It is also a great way to get in touch with creators, committers, influencers and users of these technologies.&lt;/p&gt;
&lt;p&gt;For this DemoCamp season I am promoting the &lt;a href=&quot;https://projects.eclipse.org/projects/eclipse.platform/who&quot;&gt;Eclipse Platform Project&lt;/a&gt; and thus the &lt;a href=&quot;https://www.eclipse.org/photon/&quot;&gt;Eclipse Photon IDE&lt;/a&gt;. Eclipse Photon comes with a plethora of new features and improvements which are hard to compress into a DemoCamp format. Usually presentations in DemoCamps are just 20 minutes. Attendees should get an overview of multiple projects and interesting stuff with a wide range of topics. And since DemoCamps are in the evenings, attendees want to get entertained and not bored by long talks. The focus is on real demos, live coding and networking. I love to do that.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;screenshot 178.png&quot; class=&quot;alignnone size-full wp-image-1016&quot; src=&quot;https://kthoms.files.wordpress.com/2018/07/screenshot-178.png?w=584&quot; /&gt;&lt;/p&gt;
&lt;p&gt;My talk is named “&lt;strong&gt;&lt;em&gt;Approaching Light Speed – News from the Eclipse Photon Platform&lt;/em&gt;&lt;/strong&gt;“. &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/approaching-light-speed-news-eclipse-photon-platform&quot;&gt;I have given this talk already at EclipseCon France&lt;/a&gt;, at the &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Zurich&quot;&gt;DemoCamps in Zurich&lt;/a&gt; and &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Darmstadt&quot;&gt;Darmstadt&lt;/a&gt;, and internally at our itemis headquater before our yearly company wide party called &lt;em&gt;&lt;a href=&quot;https://blogs.itemis.com/de/arbeiten-bei-itemis-feiern-geh%C3%B6rt-dazu&quot;&gt;itemis SummerCon&lt;/a&gt;&lt;/em&gt;. I have prepared quite a bunch of stuff to talk about. But different then usually, I do not perform live coding, but show coding with small screencasts in my presentation. For this talk I would have to switch too many between different code and workspaces, and comparisons to the previous version Eclipse Oxygen would make this even worse. It is just too confusing if I would switch so often. And would take much longer so I could present not that much.&lt;/p&gt;
&lt;p&gt;At EclipseCon France I had 35 minutes for the talk, and even for that I had strip down the material I already had. The new supported Java versions 9 and 10 in JDT I could just scratch at surface level, although this is one of the real major things in Eclipse Photon. But platform improvements are that much that JDT has to be put into background. For a DemoCamp talk in 20 minutes challenges become bigger. However, in Zurich and Darmstadt I had only those 20 minutes and I thing I managed to give a smooth and interesting presentation. The attendees I spoke afterwards were impressed from all the great stuff that comes with the Eclipse Photon IDE and made them hungry to finally get Photon and use it for their work. Last week on June 27th it was finally time for the great release!&lt;/p&gt;
&lt;p&gt;My next stop is now the &lt;strong&gt;&lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Eindhoven&quot;&gt;DemoCamp in Eindhoven this Wednesday on July 4th 2018&lt;/a&gt;.&lt;/strong&gt; This DemoCamp will be held at the office from &lt;a href=&quot;https://www.altran.com/nl/en/&quot;&gt;Altran&lt;/a&gt; and is organized by my former colleague Niko Stotz. This will be the first Eclipse DemoCamp held in Eindhoven, and maybe the first in the Netherlands (I don’t remember if one was already in the Netherlands so far). I am interested how engaged the developer community in and around Eindhoven is and hope for Niko that many interested people are making their way to the event!&lt;/p&gt;
&lt;p&gt;My colleague and friend Holger Schill will present the new and noteworthy features of the new &lt;a href=&quot;https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2018/05/23/version-2-14-0&quot;&gt;Xtext 2.14 release&lt;/a&gt; that ships with Eclipse Photon. Last week we showed this in the webinar &lt;em&gt;“&lt;a href=&quot;https://www.meetup.com/de-DE/Virtual-Eclipse-Community-MeetUp/events/251050425/&quot;&gt;Eclipse Photon Series: What’s New in the Eclipse Xtext 2.14?&lt;/a&gt;“&lt;/em&gt;, which got &lt;a href=&quot;https://www.youtube.com/watch?v=Isxverh09e4&quot;&gt;recored on YouTube&lt;/a&gt;. If you want the information given there in 60 minutes condensed, make sure to visit the DemoCamp! Further you will see the wonderful Mélanie Bats. She will present all the new features in &lt;a href=&quot;https://www.eclipse.org/sirius/&quot;&gt;Eclipse Sirius 6&lt;/a&gt;. Besides all the news from the modeling technologies Marc Hamilton is showing how they use the Eclipse Modeling technology stack (Xtext, Sirius, EMF and others) at Altran to build solutions with them.&lt;/p&gt;
&lt;p&gt;So, my fellow software engineers &amp;amp; craftsmen in the Netherlands, &lt;a href=&quot;https://eclipse.altran.nl/&quot;&gt;register for the Eindhoven DemoCamp&lt;/a&gt; now and see you there!&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 14:42:31 +0000</pubDate>
</item>
<item>
	<title>Melanie Bats: Sirius 6</title>
	<guid isPermaLink="true">http://melb.enix.org/2018/07/02/futur-of-modeling-tools/</guid>
	<link>http://melb.enix.org/2018/07/02/futur-of-modeling-tools/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/sirius/&quot;&gt;Eclipse Sirius&lt;/a&gt; is a framework to easily and quickly create a graphical modeling workbench dedicated to your domain specific language.&lt;/p&gt;

&lt;p&gt;This year at &lt;a href=&quot;https://www.obeo.fr/en&quot;&gt;Obeo&lt;/a&gt;, we started working on two aspects: &lt;strong&gt;prepare the future of Sirius&lt;/strong&gt; &amp;amp; provide &lt;strong&gt;new features for the upcoming 6.0&lt;/strong&gt; release which is part of the Photon release train.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ready for Photon? Sirius 6.0 is there for you!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have added several new features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Support for background color on diagrams&lt;/strong&gt;: it is now possible to dynamically compute the color of the diagram according to the state of the model. This is a small feature, but it continues to expand the visual customization capabilities available to specifiers.
&lt;img alt=&quot;Background color on diagrams&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/diagram_background.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;New “magic” edge creation tool&lt;/strong&gt;: All diagrams will now benefit for free from a new smart edge creation tool. Thanks to this end users no longer have to chase for the appropriate tool in the palette (which can contain many entries): just click on the source and target of the edge to create and Sirius will automatically detect which tools can be applied to them. If there is only one, the edge is created immediately. If several tools are possible as is the case of the animation, a menu opens to choose among the candidate tools.
&lt;img alt=&quot;New “magic” edge creation tool&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/runtime_sirius_demo2.gif&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Quick navigation to service method implementation&lt;/strong&gt;: Real-world modelers often need to call into Java code to perform complex operations on models or call into Sirius and Eclipse APIs. This is very straightforward to do in Sirius with the notion of Java services that can be transparently invoked from AQL expressions. It is now possible to navigate from the expressions in the Sirius specification which invoke a service method directly into the corresponding Java code with a single keystroke.
&lt;img alt=&quot;Quick navigation to service method implementation&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/runtime_sirius_demo.gif&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Integration with ELK for improved diagram layouts&lt;/strong&gt;: Sirius has always proposed an automatic layout algorithm. Specifiers can now leverage the high-quality layout algorithms provided by the Eclipse ELK project. You can choose any of the algorithms proposed by ELK and tweak all their configuration parameters in the Sirius specification. The end users will transparently get a nicer layout when using the existing “Arrange All” action. This is experimental in Sirius 6.0. Give us feedback on which aspects to focus on for the future.
&lt;img alt=&quot;Integration with ELK for improved diagram layouts&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/runtime_sirius_sm.png&quot; /&gt;
&lt;img alt=&quot;Override ELK options&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/override_options.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What’s next&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;We are working on what would be the future of modeling tools. We already gathered 
some feedback from the community. You expect that modeling in the future would be: &lt;strong&gt;fast, simple, easy, beautiful, cloud &amp;amp; collaborative&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We believe that the concept of IDE is evolving. In the future, we will have more accessible tools and better tool integration. In the end, we think that tools should become IDE agnostic.  We will have more and more tools dedicated to specific domains. These tools would be available more broadly, for various kind of users on any kind of platforms. We need frameworks to ease the creation of such specific tools dedicated to one usage. That’s why we believe in frameworks such as Sirius.&lt;/p&gt;

&lt;p&gt;Sirius is a really nice framework to create dedicated desktop workbenches based today on the Eclipse platform. Our purpose is to bring the spirit of Sirius to the cloud: easily develop modeling workbenches but rendered in a browser and integrable in any web application.&lt;/p&gt;

&lt;p&gt;So where are we today? We are going step by step and work on different aspects.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Introduce web technologies in existing Eclipse views&lt;/strong&gt;: Our first step is to introduce web technologies in existing Eclipse views. This approach is used to provide a brand new feature in Sirius 6.0 called Workflow which allows specifiers to guide users through the usage of their workbench. On the left of the following screenshot, we see a Sirius configuration file which defines a workflow with different actions using this new DSL. To the end-user, these are rendered as web elements inside the Eclipse view. Note that this new feature is still experimental in 6.0, and will be improved for version 6.1 this fall.
&lt;img alt=&quot;Web components in Eclipse view&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/webcomponents_sm.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make Sirius independent from Eclipse platform&lt;/strong&gt;: The idea is to make the Sirius code base more modular, isolating the core business concerns from the current Eclipse-based technology stack: the Eclipse UI, GMF, the workspace, and even the Eclipse Runtime itself. We will work on this progressively over several versions, making sure Sirius always keeps working even in the classical Eclipse-based context. The end goal is to get a set of core components that can be reused both in Eclipse and, more to the point, inside a web server exposing its services to any web client through a well-defined protocol.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/Ua3-93O3TRs&quot;&gt;Render Sirius diagrams in a browser&lt;/a&gt;&lt;/strong&gt;: Based on a classical Sirius configuration, we can render in a browser the graphical elements of a diagram. As usual, the specifier can work on the look and feel of his modeler iteratively. This prototype is based on Sprotty. Sprotty is a new project proposed to the Eclipse Foundation by TypeFox. It is a small, lightweight, open source &amp;amp; well architectured JavaScript graphical library providing rendering in SVG &amp;amp; well integrated with Eclipse ELK which provides auto-layout.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sirius integrated with Cloud IDEs&lt;/strong&gt;: Sirius in a near future will be IDE-agnostic. Then you will be able to integrate Sirius based workbenches in any web application or any IDE. Have a look at the prototypes we already have of Sirius integrated in Eclipse Theia and of Sirius integrated in Eclipse Che.
&lt;img alt=&quot;Sirius integrated with Cloud IDEs&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/sirius_components_sm.png&quot; /&gt;
To sum up, we will keep working on the existing Sirius project and we will reintegrate the new web-related features and components. This summer we will continue our work on the modularization of the architecture. And for the 6.1 this fall, we will contribute a first version of web based diagrams based on the Graphical Server Protocol. 
&lt;img alt=&quot;Sirius timeline&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/diagram_workflow.png&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At Obeo, we’re taking a community-first approach to influence the development of the next generation of modeling tools. Please tell us what you want! We have lots of ideas for the future of Sirius. But what we need is to know what YOU need. So please Speak Up!&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 10:00:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Simplified database transaction management with the Vert.x RxJava API</title>
	<guid isPermaLink="true">https://vertx.io/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api</guid>
	<link>https://vertx.io/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api</link>
	<description>&lt;article&gt;&lt;p&gt;&lt;em&gt;TL;DR As of 3.5, managing database transactions with Vert.x requires a lot of boilerplate code.&lt;/em&gt;
&lt;em&gt;Vert.x 3.6 will provide helpers and &lt;code&gt;Observable&lt;/code&gt; transformers to easily make a reactive flow transactional.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;simple-queries-with-the-_-rxified-_-api&quot;&gt;Simple queries with the &lt;em&gt;“Rxified”&lt;/em&gt; API&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://vertx.io/docs/vertx-rx/java2/&quot;&gt;Vert.x API for RxJava&lt;/a&gt; is one of the most popular modules in the Vert.x stack.&lt;/p&gt;
&lt;p&gt;So we make sure the &lt;em&gt;“Rxified”&lt;/em&gt; API is easy to use for common programming tasks, such as reading rows from a relational database and sending the result to the client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;dbClient.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name, duration FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;)
  .map(ResultSet::getResults)
  .map(rows -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
  })
  .subscribe(json -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
  }, t -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;managing-transactions-with-vert-x-3-5&quot;&gt;Managing transactions with Vert.x 3.5&lt;/h2&gt;
&lt;p&gt;But very often, developers have to implement complex interactions with the database, running inside a single transaction.
To do so, the implementation must follow this process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get a connection from the pool,&lt;/li&gt;
&lt;li&gt;start a transaction,&lt;/li&gt;
&lt;li&gt;execute queries,&lt;/li&gt;
&lt;li&gt;if all queries succeed, commit the transaction,&lt;/li&gt;
&lt;li&gt;otherwise, rollback the changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How does that translate to code?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get a connection from the pool&lt;/span&gt;
dbClient.rxGetConnection().flatMap(sqlConnection -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Setting auto-commit mode to false implicitely starts a transaction&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;)
    .andThen(
      &lt;span class=&quot;hljs-comment&quot;&gt;// Database queries&lt;/span&gt;
      sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES ('The Israelites')&quot;&lt;/span&gt;)
        .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')&quot;&lt;/span&gt;))
        .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')&quot;&lt;/span&gt;))
        .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;).map(ResultSet::getResults))
    )
    &lt;span class=&quot;hljs-comment&quot;&gt;// Commit if all queries succeed&lt;/span&gt;
    .flatMap(rows -&amp;gt; sqlConnection.rxCommit().andThen(Single.just(rows)))
    .onErrorResumeNext(throwable -&amp;gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// On error, rollback the changes&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxRollback().onErrorComplete()
        .andThen(sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;).onErrorComplete())
        .andThen(Single.error(throwable));
    }).flatMap(rows -&amp;gt; sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;).andThen(Single.just(rows)))
    .doFinally(sqlConnection::close);
}).map(rows -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is a lot of boilerplate around the specific database queries…
It would be better to relieve the developer from maintaining it.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-3-6-tools-for-transaction-management&quot;&gt;Vert.x 3.6 tools for transaction management&lt;/h2&gt;
&lt;p&gt;That is why Vert.x 3.6 will provide &lt;em&gt;&lt;code&gt;Observable&lt;/code&gt; transformers&lt;/em&gt; that can be applied to reactive flows with &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/io/reactivex/Flowable.html#compose-io.reactivex.FlowableTransformer-&quot;&gt;&lt;code&gt;compose&lt;/code&gt;&lt;/a&gt; to make them transactional:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txFlowableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txObservableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txSingleTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txMaybeTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txCompletableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These &lt;em&gt;transformers&lt;/em&gt; wrap the corresponding source of events with SQL transaction management.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;dbClient.rxGetConnection().flatMap(sqlConnection -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES ('The Israelites')&quot;&lt;/span&gt;)
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;).map(ResultSet::getResults))
    .compose(SQLClientHelper.txSingleTransformer(sqlConnection))
    .doFinally(sqlConnection::close);
}).map(rows -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Source &lt;em&gt;transformers&lt;/em&gt; provide maximum flexibility: you are still able to execute operations with the connection after the transaction completes.&lt;/p&gt;
&lt;p&gt;However, you usually do not need the connection after the changes are &lt;em&gt;commited&lt;/em&gt; or &lt;em&gt;rollbacked&lt;/em&gt;.
In this case, you may simply create you source observable with one of the transactional helper methods in &lt;code&gt;io.vertx.reactivex.ext.sql.SQLClientHelper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s rewrite the previous example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;SQLClientHelper.inTransactionSingle(client, sqlConnection -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES ('The Israelites')&quot;&lt;/span&gt;)
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;).map(ResultSet::getResults))
}).map(rows -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;give-it-a-try&quot;&gt;Give it a try&lt;/h2&gt;
&lt;p&gt;Vert.x 3.6 is expected around fall, but the code is already in master and &lt;em&gt;snapshots&lt;/em&gt; are regularly published to Sonatype’s OSS repos.&lt;/p&gt;
&lt;p&gt;So give it a try and feel free to provide your feeback on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Christopher Guindon: Eclipse Marketplace Client, Photon Edition not opening in certain cases</title>
	<guid isPermaLink="true">https://www.chrisguindon.com/post/marketplace-client-not-opening-in-photon/</guid>
	<link>https://www.chrisguindon.com/post/marketplace-client-not-opening-in-photon/</link>
	<description>&lt;p&gt;The Eclipse Marketplace Client, Photon edition has a bug where it fails to open in certain cases. If nothing happens when you try to access the Eclipse Marketplace via &lt;strong&gt;“Help &amp;gt; Eclipse Marketplace”&lt;/strong&gt;, please update the Marketplace Client plug-in by doing the following:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Marketplace Client not opening in Photon&quot; src=&quot;https://www.chrisguindon.com/images/06-marketplace/mpc-update.png&quot; title=&quot;Marketplace Client not opening in Photon&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to Help &amp;gt; Install New Software&lt;/li&gt;
&lt;li&gt;Paste the Marketplace Client update site url into the “Work with” field: &lt;strong&gt;&lt;a href=&quot;http://download.eclipse.org/mpc/photon&quot;&gt;http://download.eclipse.org/mpc/photon&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select the “EPP Marketplace Client” checkbox&lt;/li&gt;
&lt;li&gt;Follow the wizard and restart your Eclipse to finish the installation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are working on providing an update to the Eclipse Photon release to distribute the fix through automatic updates and package downloads. In the meantime, please update manually if you are affected by this bug.&lt;/p&gt;

&lt;p&gt;If you have any questions about this update process, please send an email to &lt;a href=&quot;mailto:mpc-dev@eclipse.org&quot;&gt;mpc-dev@eclipse.org&lt;/a&gt;. For more technical details, see &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=536385&quot;&gt;bug 536385&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Blog post co-authored with &lt;a href=&quot;https://www.eclipse.org/user/creckord&quot;&gt;Carsten Reckord&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Tanja Obradovic: Jakarta EE, Eclipse MicroProfile and Cloud-Native at EclipseCon France</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6631 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/jakarta-ee-eclipse-microprofile-and-cloud-native-eclipsecon-france</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;These are exciting times for the Java community! &lt;a href=&quot;https://www.eclipsecon.org/france2018/&quot;&gt;EclipseCon France (ECF) 2018&lt;/a&gt;, the first ECF since Oracle contributed Java EE to Eclipse Foundation, surely reflected that. The Jakarta EE brand, now firmly accepted by the community,  received heightened visibility at ECF via a track dedicated to Jakarta EE and related technologies. The &lt;strong&gt;MicroServices, MicroProfile, EE4J, &amp;amp; Java EE&lt;/strong&gt; track included talks  related to cloud native application development using the MicroProfile programming model, EE4J and Jakarta EE (Java EE) technologies. Topics included: how to build a fault tolerant microservice, how to monitor and trace the service invocations, how to secure microservices, best practices, and more.  Based on session attendance and community feedback it is clear interest in Jakarta EE, MicroProfile and Microservices is high and growing.&lt;/p&gt;

&lt;p&gt;The talks varied from a beginner to advanced level and were given by well known Java developers, open source project committers and community leaders. It was a fabulous opportunity to meet Java enthusiasts seeking community involvement and looking forward to contributing to the success of Jakarta EE for Cloud application development.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Here are some highlights from talks and presentations.&lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;Cloud-Native Application Development&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;(based on &lt;a href=&quot;https://www.eclipsecon.org/france2018/sites/default/files/slides/PathToCNAD-EC-France-Session-June-2018.pdf&quot;&gt;RedHat presentation&lt;/a&gt;, Thomas Qvarnstrom, Cesar Saavedra)&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;In the case you are wondering what exactly is cloud-native application development, please refer to the great presentation from RedHat. It will give you answers on what changes are required from &lt;em&gt;development &lt;/em&gt;and &lt;em&gt;deployment &lt;/em&gt;perspective. This also means you’ll get pointers for architectural and organizational changes needed when developing cloud-native applications.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;As we know “a picture tells a thousand words”, so here is the slide from the presentation that describes it all&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/nativeappdev_0.png&quot; style=&quot;height: 215px; width: 400px;&quot; /&gt;  &lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Development assumes &lt;strong&gt;Service-based architecture&lt;/strong&gt; with &lt;strong&gt;API-driven communication&lt;/strong&gt;&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Deployment is done using &lt;strong&gt;containers infrastructure&lt;/strong&gt; and &lt;strong&gt;DevOps process&lt;/strong&gt; (continuous integration and ongoing deployment, tight collaboration between teams)  &lt;/div&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;If you are wondering how different are Traditional from Cloud-Native Application Development is, again, one of the slides from the same presentation sums it up.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/TradVsCloud-Native_1.png&quot; style=&quot;height: 197px; width: 400px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;And finally, if you would like to develop cloud native applications here are steps you need to follow&lt;/p&gt;

&lt;ol&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Evolve Cloud Native DevOps practices and culture (take advantage of new tech, faster approaches and tighter collaboration)&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Speed up existing applications (migrate app server to container-based platform)&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Use Application Services optimized for cloud and containers&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Choose right tool for right task - Multiple runtimes and frameworks&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Self-Service On-Demand Infra (allow developers to access infra when they need it with IT Ops control &amp;amp; visibility)&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Automate it to accelerate delivery (Integrated full-scale enterprise-wide automation)&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Implement Continuous Delivery, Integration and Deployment (CD/CI) - to provide updates w/o operational capacity &amp;amp; reduced risk&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Evolve a more modular architecture - Microservices Architecture and its alternatives&lt;/div&gt;
	&lt;/li&gt;
&lt;/ol&gt;

&lt;div dir=&quot;ltr&quot;&gt;Eclipse MicroProfile&lt;/div&gt;

&lt;p&gt;(Based on &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/eclipse-microprofile-new-and-noteworthy&quot;&gt;MicroProfile presentation&lt;/a&gt;, Ivar Grimstad)&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Enterprise Java technologies like Java EE have evolved for nearly two decades to support distributed application architectures. The MicroProfile is the next step in that evolution and it is optimizing Enterprise Java for a microservices architecture.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Eclipse MicroProfile is an open-source community specification for Enterprise Java microservices, that is engaging individuals, organizations, and vendors collaborating within an open source (Eclipse Foundation) project.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;The slide below shows how MicroProfile (an early release) relates to Java EE.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/microprofile_javaee_0.png&quot; style=&quot;height: 193px; width: 400px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Popularity and expansion of the profile in last two years (since the first release Sept 2016) is gaining a major momentum in the Java community. MicroProfile since then evolved and the current release Eclipse MicroProfile 2.0 specification looks like this&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/microprofil20_0.png&quot; style=&quot;height: 267px; width: 400px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Who are MicroProfile implementers?&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/microprofilimpl_0.png&quot; style=&quot;height: 169px; width: 400px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;Jakarta EE&lt;/h2&gt;

&lt;p&gt;(based on &lt;a href=&quot;https://www.eclipsecon.org/france2018/sites/default/files/slides/Jakarta%20EE.pdf&quot;&gt;IBM presentation&lt;/a&gt;, Kevin Sutter)&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;This talk provided a great overview of the status of the EE4J project set up to evolve the Java EE technologies contributed by Oracle to the Eclipse Foundation into the Jakarta EE platform.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;The following material is being moved from Oracle to the Eclipse Foundation&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Java EE 8 Specifications&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Java EE 8 APIs&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Java EE 8 RIs&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Java EE 8 TCKs&lt;/div&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;Progress on the code move to Eclipse Foundation can be viewed  &lt;a href=&quot;https://www.eclipse.org/ee4j/status.php&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first Jakarta EE release is expected late 2018. The first Jakarta EE release will be equivalent to Java EE 8 platform.&lt;/p&gt;

&lt;p&gt;There are additional changes taking place as well! Here are some of the highlights:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Oracle’s Java Community Process (JCP) [for Java EE only] is in going to be changed by the Jakarta EE Working Group.&lt;/p&gt;

&lt;div class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;Key Benefits of the Jakarta EE Working Group&lt;/div&gt;

&lt;ul dir=&quot;ltr&quot;&gt;
	&lt;li class=&quot;rteindent1&quot;&gt;Vendor Neutral&lt;/li&gt;
	&lt;li class=&quot;rteindent1&quot;&gt;Open Intellectual Property Flows&lt;/li&gt;
	&lt;li class=&quot;rteindent1&quot;&gt;More Agile and Flexible&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;Specification development approach change&lt;/p&gt;

&lt;ul dir=&quot;ltr&quot;&gt;
	&lt;li class=&quot;rteindent1&quot;&gt;JCP specification development was based on specification development first, then code based on the specification&lt;/li&gt;
	&lt;li class=&quot;rteindent1&quot;&gt;Jakarta EE Working Group is proposing the reverse - Code development first and, then specification based on the code…&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;Oracle’s Java Specification Request (JSR) will be replaced by Eclipse Foundation Specification Process&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Currently being defined by the Jakarta EE Specification Committee&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Covers many aspects–Specifications, APIs, Implementations, TCKs, Licensing, and Branding&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://accounts.eclipse.org/mailing-list/jakarta.ee-spec&quot;&gt;https://accounts.eclipse.org/mailing-list/jakarta.ee-spec&lt;/a&gt;&lt;/div&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;Eclipse Foundation Licensing&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Usage License (EPL v2*)&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Specs, APIs, RIs, and TCKs!&lt;/div&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;MicroProfile and Java EE&lt;/p&gt;

&lt;p class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;MicroProfile1.4 (Java EE 7)&lt;/p&gt;

&lt;p class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;• Config 1.3 • Fault Tolerance 1.1 • JWT 1.1 • OpenTracing 1.1 • Rest Client 1.1&lt;/p&gt;

&lt;p class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;MicroProfile2.0 (Java EE 8)&lt;/p&gt;

&lt;p class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;• CDI 2.0 • JAX-RS 2.1 • JSON-P1.1 • JSON-B1.0 • (Common Annotations 1.3)&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;There is a lot of enthusiasam about revitalizing and modernizing the old Java EE specification and JCP process. It is refreshing to see the excitement and interset about the work already done, and furthermore the work being laid out for Jakarta EE - the cornerstone Cloud-native Application Development, as continuation of the success Java EE, once had in (monolithic) on-premise application development.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Lastly, much thanks to all community members and our sponsors that made the event extremely memorable and possible.  Looking forward to seeing many of you at EclipseCon Europe. See you all very soon. Shout out to Emily Jiang, IBM, chair of the MicroServices, MicroProfile, EE4J, &amp;amp; Java EE track and all the session contributors.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 28 Jun 2018 19:59:50 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus’s Photonic 4.0!</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1106</guid>
	<link>https://papyrusuml.wordpress.com/2018/06/28/papyruss-photonic-4-0/</link>
	<description>&lt;p&gt;It had to happen: &lt;strong&gt;Papyrus is now available at version 4.0&lt;/strong&gt;! That’s Papyrus “Photon” for those of you who follow the Eclipse release names.&lt;/p&gt;
&lt;p&gt;Curious about what was done in this release? You can find that in the &lt;a href=&quot;https://projects.eclipse.org/projects/modeling.mdt.papyrus/releases/4.0.0/bugs&quot;&gt;list of addressed issues&lt;/a&gt; (a.k.a., the bug list). The following topics are addressed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new preference has been introduced to keep stereotype application with their base element see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/StereotypeApplication_Preference&quot;&gt;StereotypeApplication Preference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The hyperlink navigation has changed see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/Hyperlink_Navigation&quot;&gt;Hyperlink Navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a preference page to configure the visualization of  external decorator  see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/External_Decorator&quot;&gt;External Decorator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add auto-completion to select the type in the property view see  &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/Auto_complete_type&quot;&gt;Auto complete type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add an export to HTML to see model without papyrus see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/HTML_Export&quot;&gt;HTML Export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Development and adaptation of the Layer tool for the diagrams &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Oxygen_Work_Description/NewFeature/Layers&quot;&gt;Layers&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;Synchronization with ELK see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/ELK&quot;&gt;ELK adaptation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tables improvements:
&lt;ul&gt;
&lt;li&gt;display of a string instead of N/A&lt;/li&gt;
&lt;li&gt;Matrix improvements&lt;/li&gt;
&lt;li&gt;save by UUID not the positon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Diagrams improvements:
&lt;ul&gt;
&lt;li&gt;some problems about the name label of ports have been fixed&lt;/li&gt;
&lt;li&gt;some resize action in the class diagram have been fixed.&lt;/li&gt;
&lt;li&gt;sequence diagram – Better movement  management of Elements, introduction of combined fragment, RCPTT tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; Integrate a  tool to adapt your model based on the modification of the profile&lt;/li&gt;
&lt;li&gt;Architecture framework : stabilization (easier customizations/modifications by the users) and bug corrections&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Want to try it out? Here are a few links to help you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/modeling/mdt/papyrus/updates/releases/photon/&quot;&gt;Update site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/papyrus/download.html#rcp&quot;&gt;RCP &lt;/a&gt;(With the “RCP*”, you can just download and run!)&lt;/li&gt;
&lt;li&gt;And of course you could stil use the &lt;a href=&quot;https://www.eclipse.org/downloads/eclipse-packages/index.php&quot;&gt;Eclipse Installer&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;(* In case you were wondering, “RCP” stands for “Rich Client Platform &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 28 Jun 2018 19:18:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Take Your Code to the Next Level With Eclipse Photon</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/mbSb135JP7Y/take-your-code-next-level-eclipse-photon</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/mbSb135JP7Y/take-your-code-next-level-eclipse-photon</link>
	<description>Join over 4 million active users of the Eclipse IDE and take your coding to the next level with Eclipse Photon.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/mbSb135JP7Y&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 28 Jun 2018 17:00:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms and EMF Client Platform 1.17.0 released!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39713</guid>
	<link>https://eclipsesource.com/blogs/2018/06/28/emf-forms-and-emf-client-platform-1-17-0-released/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We are happy to announce that with the Photon release train, we have also shipped  &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/ecp/emfforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Forms&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/ecp&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Client Platform&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; 1.17.0! &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We want to thank our continuously active team of &lt;/span&gt;&lt;b&gt;10 contributors &lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(&lt;/span&gt;&lt;b&gt;40 contributors&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; overall) for completing on &lt;a href=&quot;https://bugs.eclipse.org/bugs/buglist.cgi?bug_status=UNCONFIRMED&amp;amp;bug_status=NEW&amp;amp;bug_status=ASSIGNED&amp;amp;bug_status=REOPENED&amp;amp;bug_status=RESOLVED&amp;amp;bug_status=VERIFIED&amp;amp;bug_status=CLOSED&amp;amp;classification=Modeling&amp;amp;component=Common&amp;amp;component=Editor&amp;amp;component=EMF%20Forms&amp;amp;component=Model%20Workspace&amp;amp;component=Navigator&amp;amp;component=Validation&amp;amp;list_id=17638428&amp;amp;product=ECP&amp;amp;query_format=advanced&amp;amp;target_milestone=1.17.0&quot;&gt;57 bug fixes and features&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. EMF Forms continues to be one of the most active projects at Eclipse.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We are thankful for all the feedback from our very active group of adopters, for which we have &lt;/span&gt;&lt;b&gt;an additional improvement to announce&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;During the 1.17.0 release cycle, we were talking with contributors and adopters about how to ease the adoption of new versions. While new features in EMF Forms are typically developed as optional additions, there are obviously always some fixes and changes that affect the existing default behavior. As EMF Forms is by definition a user visible framework, even small changes in a new version can sometimes have an unexpected effect in adopter projects. As an example ordering elements alphabetically in a list dialog by default can be considered to be a bug fix for a certain adopter project. For another adopter, this change could cause a regression, as the existing “undefined” order was good for them. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As another example, showing descriptive tooltips on table column headers might sound like an improvement. However, this change is bad if you never refined the underlying attribute descriptions. This “improvement” makes the string visible, which is not really comprehensible by end-users (see screenshot below for an example). Again, an “improvement” can cause unwanted behavior.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EMF Forms and EMF Client Platform 1.17.0 released!&quot; class=&quot;wp-image-39715 size-full aligncenter&quot; height=&quot;103&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/06/image26.png&quot; width=&quot;389&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;While we always try to avoid changes to the default behavior and make new things optional, sometimes changes to core components make sense and are an improvement for most adopters. In any case, the developer team cannot possibly foresee all consequences of a change in all adopters projects. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, due to the high development activity of EMF Forms, it is quite some effort for adopters to browse all fixed bug reports of a release to find relevant changes. Therefore, we decided to improve the communication about those kind of changes. To achieve this, we introduced the usage of a new keyword on our Bug Reports: “&lt;/span&gt;&lt;b&gt;Test&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;”.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The tag is to be used:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;when the default behavior of a component has changed, even if they are considered an improvement&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;when a new feature has been added which is enabled by default&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Any changes and adaptations of visible UI elements, even if they are considered an improvement&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Non-trivial refactorings with a risk for regressions&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Of course all of the above mentioned criteria are subject to interpretation, more details can be found in &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/ecp/emfforms/gettinginvolved.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;our contributions guideline&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. In general, the “&lt;/span&gt;&lt;b&gt;Test&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;” keyword highlights bug reports, which should definitely be looked at and tested in detail by all adopters, when they update to a new version.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We hope this helps all adopters, we are of course happy for any feedback on this. Finally, please note that we introduced the keyword during our last development cycle, so 1.17.0 is not fully triaged yet. Therefore, please consider to tag a bug report with the “Test” keyword yourself, if the change has an unexpected effect in your project so that other adopters can benefit from your findings.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Further, kindly continue to ask questions &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/forums/index.php/f/19/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;in the newsgroup&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=ecp&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;file Bug Reports&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In case you don’t know EMF Forms: It is a framework focused on the creation of form-based UIs. EMF Client Platform is designed to support the development of applications based on an EMF data model. If you are not yet familiar with EMF Forms, please refer to &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/tutorials/getting-started-with-EMF-Forms/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for an introduction.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Both of these frameworks are part of the Eclipse Modeling Tools Photon package, but you can also find the new release on our download pages:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;http://eclipse.org/ecp/download.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Download EMF Client Platform&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;http://eclipse.org/ecp/emfforms/download.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Download EMF Form&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As always, we will also blog about new features of the EMF Forms / ECP 1.17.0 release in the upcoming weeks! Please follow this blog or follow us on twitter to get notified about the new posts.&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 28 Jun 2018 10:55:09 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Photon Release of Eclipse IDE Ships With Full Rust Support</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/bSAFj43Kl2g/New-Photon-Release-of-Eclipse-IDE-Ships-With-Full-Rust-Support.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/bSAFj43Kl2g/New-Photon-Release-of-Eclipse-IDE-Ships-With-Full-Rust-Support.html</link>
	<description>The Eclipse Foundation today announced the Eclipse Photon simultaneous release.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/bSAFj43Kl2g&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 27 Jun 2018 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Photon Release of Eclipse IDE Ships With Full Rust Support</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/DKCgOrGZClE/20180627_new-photon-release-of-eclipse-ide-ships-with-full-rust-support.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/DKCgOrGZClE/20180627_new-photon-release-of-eclipse-ide-ships-with-full-rust-support.php</link>
	<description>The Eclipse Foundation today announced the Eclipse Photon simultaneous release.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/DKCgOrGZClE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 27 Jun 2018 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.10 Released!</title>
	<guid isPermaLink="false">http://www.eclipse.org/webtools/news.php#permalink184</guid>
	<link>http://eclipse.org/webtools/releases/3.10</link>
	<description>&lt;div&gt;
      Web Tools Platform 3.10 has been released!  &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt; and update can be performed using the
      &lt;a href=&quot;http://download.eclipse.org/releases/photon/&quot;&gt;Photon Update Site&lt;/a&gt; or through the &lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;.
      Release 3.10 is included in the Photon
          &lt;a href=&quot;https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/photonr&quot;&gt;Eclipse IDE for Java EE Developers&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/downloads/packages/eclipse-ide-javascript-and-web-developers/photonr&quot;&gt;Eclipse IDE for JavaScript and Web Developers&lt;/a&gt;, with selected portions also included in &lt;a href=&quot;http://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;.  Adopters can download &lt;a href=&quot;http://download.eclipse.org/webtools/downloads/&quot;&gt;the R3.10 build itself&lt;/a&gt; directly.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/webtools/news.php#permalink184&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 27 Jun 2018 10:00:00 +0000</pubDate>
</item>

</channel>
</rss>
